# Pilha para armazenar as rea√ß√µes
pilha_reacoes = []

# 1 - criar o alfabeto
''' Ingredientes
  a - √°gua
  p - p√©talas
  o - √≥leo
  d - dente de drag√£o
  c - costela de ad√£o
  s - sapo
'''

alfabeto = {'a', 'p', 'o', 'd', 'c', 's', 'e'}

ingrediente = {
  'a': {
    'nome': 'Agua',
    'simbolo': 'a',
    'reacao': 'dilui',
    'neutraliza': ['engrossa']
  },
  'p': {
    'nome': 'Petalas',
    'simbolo': 'p',
    'reacao': 'perfuma',
    'neutraliza': ['fedido']
  },
  'o': {
    'nome': 'Oleo',
    'simbolo': 'o',
    'reacao': 'engrossa',
    'neutraliza': ['dilui']
  },
  'd': {
    'nome': 'Dente de Dragao',
    'simbolo': 'd',
    'reacao': 'acido',
    'neutraliza': ['alcalino']
  },
  'c': {
    'nome': 'Costela de Adao',
    'simbolo': 'c',
    'reacao': 'alcalino',
    'neutraliza': ['acido']
  },
  's': {
    'nome': 'Sapo',
    'simbolo': 's',
    'reacao': 'fedido',
    'neutraliza': ['perfuma']
  },
  'e': {
    'nome': 'Erro',
    'simbolo': 'e',
    'reacao': 'erro',
    'neutraliza': []
  }
}


def ler_automato_pilha(nome_arquivo):
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            linhas = arquivo.readlines()
        
        linhas = [linha.strip() for linha in linhas if linha.strip()]
        
        estado_inicial = None
        estados_finais = set()
        dicionario_transicoes = {}
        
        i = 0
        
        # Primeira linha: Q: lista de estados
        if linhas[i].startswith('Q:'):
            estados = linhas[i][2:].strip().split()
            i += 1
        
        # Segunda linha: I: estado inicial
        if linhas[i].startswith('I:'):
            estado_inicial = linhas[i][2:].strip()
            i += 1
        
        # Terceira linha: F: estados finais
        if linhas[i].startswith('F:'):
            estados_finais_str = linhas[i][2:].strip()
            if estados_finais_str:
                estados_finais = set(estados_finais_str.split())
            i += 1
        
        # Resto das linhas: transi√ß√µes
        while i < len(linhas):
            linha = linhas[i]
            if '->' in linha:
                # Parse da transi√ß√£o APD: "estado_origem -> estado_destino | simbolo, topo_pilha, empilha"
                partes = linha.split('->')
                estado_origem = partes[0].strip()
                resto = partes[1].strip()
                
                if '|' in resto:
                    estado_destino, transicao_str = resto.split('|', 1)
                    estado_destino = estado_destino.strip()
                    transicao_info = transicao_str.strip().split(',')
                    
                    if len(transicao_info) >= 3:
                        simbolo = transicao_info[0].strip()
                        topo_pilha = transicao_info[1].strip()
                        empilha = transicao_info[2].strip()
                        
                        chave = (estado_origem, simbolo, topo_pilha)
                        dicionario_transicoes[chave] = (estado_destino, empilha)
            i += 1
        
        return estado_inicial, estados_finais, dicionario_transicoes
    
    except FileNotFoundError:
        print(f"Erro: Arquivo '{nome_arquivo}' n√£o encontrado.")
        return None, None, None
    except Exception as e:
        print(f"Erro ao ler o arquivo: {e}")
        return None, None, None

def imprime_dicionario_apd(dicionario_transicoes):
    print("\n=== DICION√ÅRIO DE TRANSI√á√ïES APD ===")
    print("Formato: (estado_atual, simbolo, topo_pilha) -> (novo_estado, empilha)")
    for chave, valor in dicionario_transicoes.items():
        print(f"{chave} -> {valor}")

def mostrar_pilha():
    if not pilha_reacoes:
        print("üß™ Po√ß√£o neutra (sem rea√ß√µes ativas)")
    else:
        print(f"üß™ Rea√ß√µes ativas na po√ß√£o: {' -> '.join(pilha_reacoes[::-1])} (topo)")

def processar_pilha(simbolo, acao_pilha):
    global pilha_reacoes
    
    if simbolo not in ingrediente:
        return False
    
    reacao_atual = ingrediente[simbolo]['reacao']
    
    print(f"\n‚ûï Adicionando {ingrediente[simbolo]['nome']}...")
    print(f"   Propriedade/Rea√ß√£o: {reacao_atual}")
    
    # Executar a√ß√£o da pilha conforme definido no aut√¥mato
    if acao_pilha == 'empilha':
        pilha_reacoes.append(reacao_atual)
        print(f"   üì§ '{reacao_atual}' empilhada!")
    elif acao_pilha == 'desempilha':
        if pilha_reacoes:
            removido = pilha_reacoes.pop()
            print(f"   üì• '{removido}' desempilhada!")
        else:
            print(f"   ‚ö†Ô∏è  Tentou desempilhar pilha vazia!")
            return False
    elif acao_pilha == 'nao_empilha':
        print(f"   ‚û°Ô∏è  Sem a√ß√£o na pilha")
    
    mostrar_pilha()
    return True

def realizar_transicao_apd(estado_atual, simbolo, dicionario):

    # Determinar topo da pilha para transi√ß√£o
    topo_pilha = pilha_reacoes[-1] if pilha_reacoes else 'vazio'
    
    # Procurar transi√ß√£o exata
    chave_exata = (estado_atual, simbolo, topo_pilha)
    if chave_exata in dicionario:
        novo_estado, acao_pilha = dicionario[chave_exata]
        return novo_estado, acao_pilha
    
    # Procurar transi√ß√£o gen√©rica (qualquer topo de pilha)
    chave_generica = (estado_atual, simbolo, '*')
    if chave_generica in dicionario:
        novo_estado, acao_pilha = dicionario[chave_generica]
        return novo_estado, acao_pilha
    
    # Procurar transi√ß√£o com pilha vazia
    chave_vazia = (estado_atual, simbolo, 'vazio')
    if chave_vazia in dicionario:
        novo_estado, acao_pilha = dicionario[chave_vazia]
        return novo_estado, acao_pilha
    
    return None, None

def verificar_po√ß√£o_finalizada():
    """Verifica se a po√ß√£o est√° em um estado est√°vel (pilha balanceada)"""
    if not pilha_reacoes:
        return True, "Po√ß√£o perfeitamente balanceada! ‚öñÔ∏è"
    elif len(pilha_reacoes) == 1:
        return True, f"Po√ß√£o com efeito dominante: {pilha_reacoes[0]} ‚ú®"
    elif len(pilha_reacoes) <= 3:
        return True, f"Po√ß√£o complexa com m√∫ltiplos efeitos: {', '.join(pilha_reacoes)} üåü"
    else:
        return False, f"Po√ß√£o inst√°vel! Muitas rea√ß√µes ativas: {len(pilha_reacoes)} rea√ß√µes üí•"

def main():
    
    print("=" * 60)
    print("üßô SIMULADOR DE PO√á√ïES - AUT√îMATO DE PILHA üßô")
    print("=" * 60)
    print("Ingredientes causam rea√ß√µes que s√£o empilhadas na po√ß√£o!")
    print("Alguns ingredientes podem neutralizar rea√ß√µes opostas.\n")
    
    # Tentar ler arquivo, sen√£o usar padr√£o
    nome_arquivo = 'automato_pilha.txt'
    estado_inicial, estados_finais, dicionario_transicoes = ler_automato_pilha(nome_arquivo)
    
    ingredientes = []
    estado_atual = estado_inicial
    pilha_reacoes = []  # Reset da pilha
    
    print(f"\nüìã Ingredientes dispon√≠veis:")
    for simbolo, info in ingrediente.items():
        if simbolo != 'e':
            print(f"   {simbolo} - {info['nome']} (causa: {info['reacao']}, neutraliza: {info['neutraliza']})")
    
    print(f"\nüèÅ Estado inicial: {estado_inicial}")
    print(f"üéØ Estados finais: {estados_finais}")
    
    mostrar_pilha()
    
    # Pergunta pelo primeiro ingrediente
    print("\n" + "‚îÄ" * 50)
    print("ü•Ñ Insira o s√≠mbolo do primeiro ingrediente da receita:")
    primeiro_ingrediente = input(">>> ").strip().lower()
    
    if primeiro_ingrediente not in alfabeto:
        print("‚ùå Ingrediente inv√°lido!")
        return
    
    ingredientes.append(primeiro_ingrediente)
    novo_estado, acao_pilha = realizar_transicao_apd(estado_inicial, primeiro_ingrediente, dicionario_transicoes)
    
    if novo_estado is None:
        print("‚ùå Transi√ß√£o inv√°lida!")
        return
    elif novo_estado == 'e':
        print("üí• ERRO: Combina√ß√£o de ingredientes incompat√≠vel!")
        return
    
    # Processar a√ß√£o na pilha
    if not processar_pilha(primeiro_ingrediente, acao_pilha):
        print("üí• ERRO: Falha ao processar pilha!")
        return
    
    estado_atual = novo_estado
    print(f"üìç Estado atual: {estado_atual}")
    
    # Loop para mais ingredientes
    while True:
        print("\n" + "‚îÄ" * 50)
        print("‚ùì Deseja inserir mais um ingrediente? (s/n)")
        resposta = input(">>> ").strip().lower()
        
        if resposta == 's':
            print("ü•Ñ Qual ingrediente ser√° inserido:")
            ingrediente_simbolo = input(">>> ").strip().lower()
            
            if ingrediente_simbolo not in alfabeto:
                print("‚ùå Ingrediente inv√°lido!")
                continue
            
            ingredientes.append(ingrediente_simbolo)
            novo_estado, acao_pilha = realizar_transicao_apd(estado_atual, ingrediente_simbolo, dicionario_transicoes)
            
            if novo_estado is None:
                print("‚ùå Transi√ß√£o inv√°lida!")
                break
            elif novo_estado == 'e':
                print("üí• ERRO: Combina√ß√£o de ingredientes incompat√≠vel!")
                break
            
            # Processar a√ß√£o na pilha
            if not processar_pilha(ingrediente_simbolo, acao_pilha):
                print("üí• ERRO: Falha ao processar pilha!")
                break
            
            estado_atual = novo_estado
            print(f"üìç Estado atual: {estado_atual}")
            
        elif resposta == 'n':
            break
        else:
            print("‚ùå Resposta inv√°lida. Digite 's' para sim ou 'n' para n√£o.")
    
    # Verificar resultado final
    print("\n" + "=" * 60)
    print("üèÅ RESULTADO FINAL")
    print("=" * 60)
    
    print(f"üìù Ingredientes utilizados: {' -> '.join(ingredientes)}")
    print(f"üìç Estado final: {estado_atual}")
    
    if estado_atual in estados_finais:
        estavel, mensagem = verificar_po√ß√£o_finalizada()
        if estavel:
            print(f"‚úÖ SUCESSO: {mensagem}")
        else:
            print(f"‚ö†Ô∏è  ATEN√á√ÉO: {mensagem}")
        
        mostrar_pilha()
        
        if pilha_reacoes:
            print(f"\nüî¨ An√°lise da po√ß√£o:")
            print(f"   ‚Ä¢ N√∫mero de rea√ß√µes ativas: {len(pilha_reacoes)}")
            print(f"   ‚Ä¢ Rea√ß√£o dominante (topo): {pilha_reacoes[-1]}")
            if len(pilha_reacoes) > 1:
                print(f"   ‚Ä¢ Rea√ß√µes em segundo plano: {', '.join(pilha_reacoes[:-1])}")
    else:
        print("‚ùå ERRO: A receita n√£o foi completada adequadamente!")
        mostrar_pilha()
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()